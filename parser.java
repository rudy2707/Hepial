
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import Arbre.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\003\000\002\002\004\000\002\004" +
    "\007\000\002\003\005\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\015\003\000\002\015\005\000\002\010\010\000\002" +
    "\011\013\000\002\011\012\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\016\006" +
    "\000\002\017\005\000\002\017\007\000\002\020\004\000" +
    "\002\020\006\000\002\021\003\000\002\021\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\005\000\002\024\005\000\002\024\005\000" +
    "\002\025\006\000\002\026\005\000\002\027\011\000\002" +
    "\030\007\000\002\031\013\000\002\032\005\000\002\032" +
    "\004\000\002\032\005\000\002\032\003\000\002\033\003" +
    "\000\002\033\004\000\002\034\005\000\002\034\006\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\036\003\000\002\036\003\000\002\012" +
    "\005\000\002\012\006\000\002\005\003\000\002\005\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\004\004\001\002\000\004\027\224\001" +
    "\002\000\004\002\223\001\002\000\012\005\ufffa\012\ufffa" +
    "\013\ufffa\041\ufffa\001\002\000\004\002\001\001\002\000" +
    "\012\005\017\012\022\013\012\041\014\001\002\000\014" +
    "\005\ufffb\007\ufffb\012\ufffb\013\ufffb\041\ufffb\001\002\000" +
    "\006\027\ufff0\037\ufff0\001\002\000\004\027\ufff2\001\002" +
    "\000\006\012\022\013\012\001\002\000\004\027\167\001" +
    "\002\000\014\005\ufffd\007\ufffd\012\ufffd\013\ufffd\041\ufffd" +
    "\001\002\000\020\011\124\027\116\031\123\032\117\054" +
    "\115\060\111\065\114\001\002\000\006\027\ufff3\037\023" +
    "\001\002\000\014\005\ufffc\007\ufffc\012\ufffc\013\ufffc\041" +
    "\ufffc\001\002\000\006\027\ufff1\037\ufff1\001\002\000\020" +
    "\027\030\035\027\042\025\044\034\045\032\052\040\053" +
    "\037\001\002\000\006\040\102\047\103\001\002\000\052" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\033\uffcf\034\uffcf\036\uffcf" +
    "\040\uffcf\047\uffcf\050\uffcf\051\uffcf\055\uffcf\062\uffcf\063" +
    "\uffcf\001\002\000\020\027\030\035\027\042\025\044\034" +
    "\045\032\052\040\053\037\001\002\000\020\027\030\035" +
    "\027\042\025\044\034\045\032\052\040\053\037\001\002" +
    "\000\056\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\033\uffd5\034\uffd5" +
    "\035\062\036\uffd5\037\061\040\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\055\uffd5\062\uffd5\063\uffd5\001\002\000\052\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\055\uffd0\062\uffd0\063\uffd0\001" +
    "\002\000\052\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\033\uffcd\034" +
    "\uffcd\036\uffcd\040\uffcd\047\uffcd\050\uffcd\051\uffcd\055\uffcd" +
    "\062\uffcd\063\uffcd\001\002\000\052\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\055\uffd6\062\uffd6\063\uffd6\001\002\000\052" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\033\uffce\034\uffce\036\uffce" +
    "\040\uffce\047\uffce\050\uffce\051\uffce\055\uffce\062\uffce\063" +
    "\uffce\001\002\000\034\015\051\016\043\017\047\020\041" +
    "\021\042\022\044\023\054\024\050\025\045\026\052\033" +
    "\055\034\046\051\053\001\002\000\052\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\033\uffd1\034\uffd1\036\uffd1\040\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\055\uffd1\062\uffd1\063\uffd1\001\002\000" +
    "\020\027\uffbf\035\uffbf\042\uffbf\044\uffbf\045\uffbf\052\uffbf" +
    "\053\uffbf\001\002\000\020\027\uffc0\035\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\052\uffc0\053\uffc0\001\002\000\020\027\uffc9" +
    "\035\uffc9\042\uffc9\044\uffc9\045\uffc9\052\uffc9\053\uffc9\001" +
    "\002\000\020\027\uffc7\035\uffc7\042\uffc7\044\uffc7\045\uffc7" +
    "\052\uffc7\053\uffc7\001\002\000\020\027\uffcb\035\uffcb\042" +
    "\uffcb\044\uffcb\045\uffcb\052\uffcb\053\uffcb\001\002\000\020" +
    "\027\uffc8\035\uffc8\042\uffc8\044\uffc8\045\uffc8\052\uffc8\053" +
    "\uffc8\001\002\000\020\027\uffc3\035\uffc3\042\uffc3\044\uffc3" +
    "\045\uffc3\052\uffc3\053\uffc3\001\002\000\020\027\uffc1\035" +
    "\uffc1\042\uffc1\044\uffc1\045\uffc1\052\uffc1\053\uffc1\001\002" +
    "\000\020\027\uffca\035\uffca\042\uffca\044\uffca\045\uffca\052" +
    "\uffca\053\uffca\001\002\000\020\027\uffc6\035\uffc6\042\uffc6" +
    "\044\uffc6\045\uffc6\052\uffc6\053\uffc6\001\002\000\020\027" +
    "\uffcc\035\uffcc\042\uffcc\044\uffcc\045\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\020\027\uffc5\035\uffc5\042\uffc5\044\uffc5\045" +
    "\uffc5\052\uffc5\053\uffc5\001\002\000\020\027\030\035\027" +
    "\042\025\044\034\045\032\052\040\053\037\001\002\000" +
    "\020\027\uffc4\035\uffc4\042\uffc4\044\uffc4\045\uffc4\052\uffc4" +
    "\053\uffc4\001\002\000\020\027\uffc2\035\uffc2\042\uffc2\044" +
    "\uffc2\045\uffc2\052\uffc2\053\uffc2\001\002\000\020\027\030" +
    "\035\027\042\025\044\034\045\032\052\040\053\037\001" +
    "\002\000\052\015\051\016\043\017\047\020\041\021\042" +
    "\022\044\023\054\024\050\025\045\026\052\033\055\034" +
    "\046\036\uffd9\040\uffd9\047\uffd9\050\uffd9\051\uffd9\055\uffd9" +
    "\062\uffd9\063\uffd9\001\002\000\036\015\051\016\043\017" +
    "\047\020\041\021\042\022\044\023\054\024\050\025\045" +
    "\026\052\033\055\034\046\040\uffee\047\uffee\001\002\000" +
    "\020\027\030\035\027\042\025\044\034\045\032\052\040" +
    "\053\037\001\002\000\022\027\030\035\027\036\070\042" +
    "\025\044\034\045\032\052\040\053\037\001\002\000\056" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\037\064\040\uffd4\047\uffd4\050\uffd4\051\uffd4\055" +
    "\uffd4\062\uffd4\063\uffd4\001\002\000\020\027\030\035\027" +
    "\042\025\044\034\045\032\052\040\053\037\001\002\000" +
    "\034\015\051\016\043\017\047\020\041\021\042\022\044" +
    "\023\054\024\050\025\045\026\052\033\055\034\046\040" +
    "\066\001\002\000\056\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\055\uffd2\062\uffd2\063\uffd2\001\002\000" +
    "\006\036\072\047\073\001\002\000\052\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\055\uffbe\062\uffbe\063\uffbe\001\002\000" +
    "\036\015\051\016\043\017\047\020\041\021\042\022\044" +
    "\023\054\024\050\025\045\026\052\033\055\034\046\036" +
    "\uffbc\047\uffbc\001\002\000\052\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\055\uffbd\062\uffbd\063\uffbd\001\002\000\020\027" +
    "\030\035\027\042\025\044\034\045\032\052\040\053\037" +
    "\001\002\000\036\015\051\016\043\017\047\020\041\021" +
    "\042\022\044\023\054\024\050\025\045\026\052\033\055" +
    "\034\046\036\uffbb\047\uffbb\001\002\000\034\015\051\016" +
    "\043\017\047\020\041\021\042\022\044\023\054\024\050" +
    "\025\045\026\052\033\055\034\046\040\076\001\002\000" +
    "\056\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\055\uffd3\062\uffd3\063\uffd3\001\002\000\034\015\051\016" +
    "\043\017\047\020\041\021\042\022\044\023\054\024\050" +
    "\025\045\026\052\033\055\034\046\036\100\001\002\000" +
    "\052\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\033\uffd7\034\uffd7\036" +
    "\uffd7\040\uffd7\047\uffd7\050\uffd7\051\uffd7\055\uffd7\062\uffd7" +
    "\063\uffd7\001\002\000\052\015\051\016\043\017\047\020" +
    "\041\021\042\022\044\023\054\024\050\025\045\026\052" +
    "\033\055\034\046\036\uffd8\040\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\055\uffd8\062\uffd8\063\uffd8\001\002\000\004\027\uffef" +
    "\001\002\000\020\027\030\035\027\042\025\044\034\045" +
    "\032\052\040\053\037\001\002\000\034\015\051\016\043" +
    "\017\047\020\041\021\042\022\044\023\054\024\050\025" +
    "\045\026\052\033\055\034\046\051\105\001\002\000\020" +
    "\027\030\035\027\042\025\044\034\045\032\052\040\053" +
    "\037\001\002\000\036\015\051\016\043\017\047\020\041" +
    "\021\042\022\044\023\054\024\050\025\045\026\052\033" +
    "\055\034\046\040\uffed\047\uffed\001\002\000\034\006\uffe7" +
    "\010\uffe7\011\uffe7\027\uffe7\031\uffe7\032\uffe7\054\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\064\uffe7\065\uffe7\066\uffe7\001\002" +
    "\000\034\006\uffe2\010\uffe2\011\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\054\uffe2\056\uffe2\057\uffe2\060\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\001\002\000\004\027\157\001\002\000\034\006" +
    "\uffe8\010\uffe8\011\uffe8\027\uffe8\031\uffe8\032\uffe8\054\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\064\uffe8\065\uffe8\066\uffe8\001" +
    "\002\000\034\006\uffe4\010\uffe4\011\uffe4\027\uffe4\031\uffe4" +
    "\032\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\001\002\000\020\027\030\035\027\042\025" +
    "\044\034\045\032\052\040\053\037\001\002\000\020\027" +
    "\030\035\027\042\025\044\034\045\032\052\040\053\037" +
    "\001\002\000\006\014\uffd5\037\061\001\002\000\022\027" +
    "\030\035\027\042\025\043\142\044\034\045\032\052\040" +
    "\053\037\001\002\000\034\006\uffe6\010\uffe6\011\uffe6\027" +
    "\uffe6\031\uffe6\032\uffe6\054\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\001\002\000\034\006\uffe5\010" +
    "\uffe5\011\uffe5\027\uffe5\031\uffe5\032\uffe5\054\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000" +
    "\034\006\uffea\010\uffea\011\124\027\116\031\123\032\117" +
    "\054\115\056\uffea\057\uffea\060\111\064\uffea\065\114\066" +
    "\uffea\001\002\000\004\027\136\001\002\000\020\027\030" +
    "\035\027\042\025\044\034\045\032\052\040\053\037\001" +
    "\002\000\034\006\uffe3\010\uffe3\011\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\001\002\000\004\014\131\001\002\000\004" +
    "\006\130\001\002\000\004\002\uffff\001\002\000\020\027" +
    "\030\035\027\042\025\044\034\045\032\052\040\053\037" +
    "\001\002\000\034\015\051\016\043\017\047\020\041\021" +
    "\042\022\044\023\054\024\050\025\045\026\052\033\055" +
    "\034\046\050\133\001\002\000\034\006\uffde\010\uffde\011" +
    "\uffde\027\uffde\031\uffde\032\uffde\054\uffde\056\uffde\057\uffde" +
    "\060\uffde\064\uffde\065\uffde\066\uffde\001\002\000\034\015" +
    "\051\016\043\017\047\020\041\021\042\022\044\023\054" +
    "\024\050\025\045\026\052\033\055\034\046\050\135\001" +
    "\002\000\034\006\uffdd\010\uffdd\011\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\001\002\000\004\050\137\001\002\000\034" +
    "\006\uffe1\010\uffe1\011\uffe1\027\uffe1\031\uffe1\032\uffe1\054" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\001\002\000\016\006\uffe9\010\uffe9\056\uffe9\057\uffe9\064" +
    "\uffe9\066\uffe9\001\002\000\034\015\051\016\043\017\047" +
    "\020\041\021\042\022\044\023\054\024\050\025\045\026" +
    "\052\033\055\034\046\050\144\001\002\000\004\050\143" +
    "\001\002\000\034\006\uffdf\010\uffdf\011\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\001\002\000\034\006\uffe0\010\uffe0\011" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\034\015" +
    "\051\016\043\017\047\020\041\021\042\022\044\023\054" +
    "\024\050\025\045\026\052\033\055\034\046\055\146\001" +
    "\002\000\020\011\124\027\116\031\123\032\117\054\115" +
    "\060\111\065\114\001\002\000\004\056\150\001\002\000" +
    "\020\011\124\027\116\031\123\032\117\054\115\060\111" +
    "\065\114\001\002\000\004\057\152\001\002\000\034\006" +
    "\uffdc\010\uffdc\011\uffdc\027\uffdc\031\uffdc\032\uffdc\054\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\064\uffdc\065\uffdc\066\uffdc\001" +
    "\002\000\034\015\051\016\043\017\047\020\041\021\042" +
    "\022\044\023\054\024\050\025\045\026\052\033\055\034" +
    "\046\063\154\001\002\000\020\011\124\027\116\031\123" +
    "\032\117\054\115\060\111\065\114\001\002\000\004\066" +
    "\156\001\002\000\034\006\uffdb\010\uffdb\011\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\054\uffdb\056\uffdb\057\uffdb\060\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\001\002\000\004\061\160\001\002" +
    "\000\020\027\030\035\027\042\025\044\034\045\032\052" +
    "\040\053\037\001\002\000\034\015\051\016\043\017\047" +
    "\020\041\021\042\022\044\023\054\024\050\025\045\026" +
    "\052\033\055\034\046\062\162\001\002\000\020\027\030" +
    "\035\027\042\025\044\034\045\032\052\040\053\037\001" +
    "\002\000\034\015\051\016\043\017\047\020\041\021\042" +
    "\022\044\023\054\024\050\025\045\026\052\033\055\034" +
    "\046\063\164\001\002\000\020\011\124\027\116\031\123" +
    "\032\117\054\115\060\111\065\114\001\002\000\004\064" +
    "\166\001\002\000\034\006\uffda\010\uffda\011\uffda\027\uffda" +
    "\031\uffda\032\uffda\054\uffda\056\uffda\057\uffda\060\uffda\064" +
    "\uffda\065\uffda\066\uffda\001\002\000\010\035\172\047\173" +
    "\050\ufff8\001\002\000\004\050\171\001\002\000\014\005" +
    "\ufff9\007\ufff9\012\ufff9\013\ufff9\041\ufff9\001\002\000\010" +
    "\012\022\013\012\036\200\001\002\000\004\027\174\001" +
    "\002\000\006\047\173\050\ufff8\001\002\000\004\050\ufff7" +
    "\001\002\000\006\036\207\047\206\001\002\000\004\027" +
    "\205\001\002\000\012\007\ufffa\012\ufffa\013\ufffa\041\ufffa" +
    "\001\002\000\012\007\202\012\022\013\012\041\014\001" +
    "\002\000\020\011\124\027\116\031\123\032\117\054\115" +
    "\060\111\065\114\001\002\000\004\010\204\001\002\000" +
    "\014\005\ufff4\007\ufff4\012\ufff4\013\ufff4\041\ufff4\001\002" +
    "\000\006\036\uffec\047\uffec\001\002\000\006\012\022\013" +
    "\012\001\002\000\012\007\ufffa\012\ufffa\013\ufffa\041\ufffa" +
    "\001\002\000\012\007\211\012\022\013\012\041\014\001" +
    "\002\000\020\011\124\027\116\031\123\032\117\054\115" +
    "\060\111\065\114\001\002\000\004\010\213\001\002\000" +
    "\014\005\ufff5\007\ufff5\012\ufff5\013\ufff5\041\ufff5\001\002" +
    "\000\004\027\215\001\002\000\006\036\uffeb\047\uffeb\001" +
    "\002\000\004\027\217\001\002\000\004\014\220\001\002" +
    "\000\020\027\030\035\027\042\025\044\034\045\032\052" +
    "\040\053\037\001\002\000\034\015\051\016\043\017\047" +
    "\020\041\021\042\022\044\023\054\024\050\025\045\026" +
    "\052\033\055\034\046\050\222\001\002\000\014\005\ufff6" +
    "\007\ufff6\012\ufff6\013\ufff6\041\ufff6\001\002\000\004\002" +
    "\000\001\002\000\004\050\225\001\002\000\012\005\ufffe" +
    "\012\ufffe\013\ufffe\041\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\007\001\001" +
    "\000\002\001\001\000\016\007\015\010\020\011\010\013" +
    "\014\014\017\016\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\215\014\017\016" +
    "\012\001\001\000\004\015\167\001\001\000\002\001\001" +
    "\000\026\021\126\022\121\023\117\024\106\025\111\026" +
    "\112\027\120\030\124\031\107\033\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\030\017\023\032\034\033\035\035\032\036\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\030\032" +
    "\100\033\035\035\032\036\025\001\001\000\014\012\030" +
    "\032\076\033\035\035\032\036\025\001\001\000\004\034" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\030\032\057\033\035\035\032\036\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\030\032" +
    "\056\033\035\035\032\036\025\001\001\000\004\037\055" +
    "\001\001\000\004\037\055\001\001\000\014\012\030\032" +
    "\074\033\035\035\032\036\025\001\001\000\016\005\066" +
    "\012\030\032\070\033\035\035\032\036\025\001\001\000" +
    "\002\001\001\000\014\012\030\032\064\033\035\035\032" +
    "\036\025\001\001\000\004\037\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\055" +
    "\001\001\000\002\001\001\000\014\012\030\032\073\033" +
    "\035\035\032\036\025\001\001\000\004\037\055\001\001" +
    "\000\004\037\055\001\001\000\002\001\001\000\004\037" +
    "\055\001\001\000\002\001\001\000\004\037\055\001\001" +
    "\000\002\001\001\000\014\012\030\032\103\033\035\035" +
    "\032\036\025\001\001\000\004\037\055\001\001\000\014" +
    "\012\030\032\105\033\035\035\032\036\025\001\001\000" +
    "\004\037\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\030\032\152\033\035\035\032\036\025\001\001" +
    "\000\014\012\030\032\144\033\035\035\032\036\025\001" +
    "\001\000\004\034\062\001\001\000\014\012\030\032\140" +
    "\033\035\035\032\036\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\137\022\121\023\117\024\106" +
    "\025\111\026\112\027\120\030\124\031\107\033\125\001" +
    "\001\000\002\001\001\000\014\012\030\032\133\033\035" +
    "\035\032\036\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\030" +
    "\032\131\033\035\035\032\036\025\001\001\000\004\037" +
    "\055\001\001\000\002\001\001\000\004\037\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\055\001" +
    "\001\000\026\021\146\022\121\023\117\024\106\025\111" +
    "\026\112\027\120\030\124\031\107\033\125\001\001\000" +
    "\002\001\001\000\026\021\150\022\121\023\117\024\106" +
    "\025\111\026\112\027\120\030\124\031\107\033\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\055" +
    "\001\001\000\026\021\154\022\121\023\117\024\106\025" +
    "\111\026\112\027\120\030\124\031\107\033\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\030\032\160\033\035\035\032\036\025\001\001" +
    "\000\004\037\055\001\001\000\014\012\030\032\162\033" +
    "\035\035\032\036\025\001\001\000\004\037\055\001\001" +
    "\000\026\021\164\022\121\023\117\024\106\025\111\026" +
    "\112\027\120\030\124\031\107\033\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\176\014\017\016\012" +
    "\020\175\001\001\000\004\015\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\200\001\001\000\016\007\015\010\020\011" +
    "\010\013\014\014\017\016\012\001\001\000\026\021\202" +
    "\022\121\023\117\024\106\025\111\026\112\027\120\030" +
    "\124\031\107\033\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\213\014\017\016" +
    "\012\001\001\000\004\006\207\001\001\000\016\007\015" +
    "\010\020\011\010\013\014\014\017\016\012\001\001\000" +
    "\026\021\211\022\121\023\117\024\106\025\111\026\112" +
    "\027\120\030\124\031\107\033\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\030\032" +
    "\220\033\035\035\032\036\025\001\001\000\004\037\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //public void syntax_error(Symbol s) {
    //    System.err.println("Compiler has detected a syntax error at line " + s.left + " column " + s.right);
    //}

    public Stack<ArbreAbstrait> pileArbres = new Stack<ArbreAbstrait>();

    public TDS tds = TDS.getInstance();

    public Type lastType;  // Dernier type récupéré.

    //public Bloc bloc = new Bloc();

    public void afficheTDS() {
        System.out.println("Affichage de TDS : ");
        System.out.println("Taille de TDS : " + TDS.getInstance().bloc.size());

        for (Map.Entry entry : TDS.getInstance().bloc.entrySet()) {
            System.out.println("Ident : " + entry.getKey() + " / Type : " + entry.getValue());
        }
    }

    // TODO : Pourquoi est-ce que la table des symboles à des entrées nulles ???

    public void afficheArbre() {
        System.out.println("Affichage de l'arbre : ");
        System.out.println("Taille de la pile de l'arbre : " + pileArbres.size());
        for (int i = pileArbres.size() - 1; i >= 0; i--) {
            System.out.println(pileArbres.get(i));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // AXIOME ::= PROGRAMME 
            {
              String RESULT =null;
		
    
    System.out.println("Pile status : " + pileArbres.size());
    /* 
       TODO : Faire la génération du bytecode.
       Appeler la classe BytecodeGenerateur et lancer la création du code.
       Le texte doit être écrit dans un bufferwrite pour pouvoir être 
       créer du bytecode avec jasmin (makefile)
    */
    Bloc root = (Bloc)pileArbres.peek();
    System.out.println("Table des symboles");
    afficheTDS();
    System.out.println("Arbre abstrait");
    afficheArbre();

    System.out.println("Analyse sémantique");
    AnalyseurSemantique.getInstance().analyse(pileArbres.peek());
    System.out.println("Done");

    System.out.println("Génération du Bytecode");
    GenerateurByteCode.getInstance().genereCode(root);
    String dstFileName = "outputBytecode.txt";
    BufferedWriter bw = new BufferedWriter(new FileWriter(dstFileName));
    bw.write(GenerateurByteCode.getInstance().getCible().toString());
    bw.close();
	System.out.println("done ("+dstFileName+")");
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AXIOME",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= AXIOME EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMME ::= ENTETE DECLA debutprg CORPS finprg 
            {
              String RESULT =null;
		
    System.out.println("FIN");
    System.out.println("Pile status : " + pileArbres.size());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMME",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENTETE ::= programme ident pointvirgule 
            {
              String RESULT =null;
		 
    System.out.println("jsuis dans l'entete"); 
    Bloc bloc = new Bloc(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTETE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLA ::= DECLA DECLAVAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLA ::= DECLA DECLACONST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLA ::= DECLA DECLAFONCT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLA ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLAVAR ::= TYPE LIDENT pointvirgule 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    // Ajout des variables dans la table des symboles.
    for (String id : list) {
        System.out.println("id : " + id);
        Ident i = new Ident(id);            // Création du nouvel identifiant.
        Entree e = new EntreeEntBool(i);    // Ajout d'une entrée.
        Symbole s = new SymboleEntBool(2, lastType);

        System.out.println("i : " + id);
        System.out.println("Lasttype : " + lastType);

        tds.getInstance().ajouter(e, s);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAVAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIDENT ::= ident 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // Si on est au dernier ident, création de l'ArrayList.
        RESULT = new ArrayList<String>();
        RESULT.add(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIDENT ::= ident virgule LIDENT 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> listID = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Ajout des valeurs dans l'ArrayList.
        RESULT = listID;
        RESULT.add(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLACONST ::= constante TYPE ident affectation EXPR pointvirgule 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLACONST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLAFONCT ::= TYPE ident parentouvrante PARAM parentfermante DECLA debutfonc CORPS finfonc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAFONCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLAFONCT ::= TYPE ident parentouvrante parentfermante DECLA debutfonc CORPS finfonc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAFONCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= TYPEBASE 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= TABLEAU 
            {
              Type RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPEBASE ::= entier 
            {
              Type RESULT =null;
		 lastType = TypeEntier.getInstance(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPEBASE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPEBASE ::= bool 
            {
              Type RESULT =null;
		 lastType = TypeBooleen.getInstance(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPEBASE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TABLEAU ::= TYPEBASE crochetouvrant DIM crochetfermant 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLEAU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIM ::= EXPR deuxpoints EXPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIM ::= DIM virgule EXPR deuxpoints EXPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAM ::= TYPE ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAM ::= PARAM virgule TYPE ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CORPS ::= INSTR 
            {
              String RESULT =null;
		 
    Bloc b = (Bloc) pileArbres.pop();
    Instruction i = (Instruction) pileArbres.pop(); 
    b.add(i);
    pileArbres.push(b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CORPS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CORPS ::= INSTR CORPS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CORPS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTR ::= AFFECTATION 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTR ::= ECRIRE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTR ::= LIRE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTR ::= CONDITION 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTR ::= RETOUR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTR ::= TANTQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTR ::= POUR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIRE ::= lire ident pointvirgule 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ECRIRE ::= ecrire EXPR pointvirgule 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECRIRE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ECRIRE ::= ecrire constantechaine pointvirgule 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECRIRE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AFFECTATION ::= ACCES affectation EXPR pointvirgule 
            {
              String RESULT =null;
		
    System.out.println("Affectation : ");
    // Dépiler l'expression.
    Expression source = (Expression) (pileArbres.pop());
    // Dépiler l'indentifiant (ACCES).
    Idf dest = (Idf)(pileArbres.pop());
    // Rempiler l'affectation.
    pileArbres.push(new Affectation(dest, source, 1));
    System.out.println("Pile status : " + pileArbres.size());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFFECTATION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETOUR ::= retourne EXPR pointvirgule 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETOUR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDITION ::= si EXPR alors CORPS sinon CORPS finsi 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
    //System.out.println("Contenu de l'arbre abstrait : "); afficheArbre();
    //System.out.println("First pop : " + pileArbres.pop());
    //System.out.println("Second poop (lol) : " + pileArbres.pop());
    System.out.println("In da Condition");
    Bloc b = (Bloc) pileArbres.pop();

    Expression e = (Expression)pileArbres.pop();
    
    Condition con = new Condition(c1, c2, e, 1);
    b.add(con);
    pileArbres.push(b); 
    System.out.println("Outta condition");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TANTQUE ::= tantque EXPR faire CORPS fintantque 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TANTQUE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // POUR ::= pour ident allantde EXPR a EXPR faire CORPS finpour 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POUR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPR ::= EXPR OPEBIN EXPR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
    System.out.println("Contenu de l'arbre abstrait : "); afficheArbre();
    System.out.println("Opebin : " + op);
    System.out.println("Pile status : " + pileArbres.size());

    // Récupère les expressions gauche et droite.
    Expression g = (Expression)pileArbres.pop();
    Expression d = (Expression)pileArbres.pop();

    System.out.println("Expression 1 : " + g);
    System.out.println("Expression 2 : " + d);

    switch (op) {
        case "+": 
            pileArbres.push(new Addition(g, d, 1));
            break;
        case "-":
            pileArbres.push(new Soustraction(g, d, 1));
            break;
        case "==":
            System.out.println("In da case");
            pileArbres.push(new Egal(g, d, 1));
            System.out.println("Outta case");
            break;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPR ::= OPEUN EXPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= parentouvrante EXPR parentfermante 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= OPERANDE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ACCES ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            // Push l'identifiant dans l'arbre.
            System.out.println("Access : " + i);
            System.out.println("Pile status : " + pileArbres.size());
            pileArbres.push(new Idf(i, 1)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACCES ::= ident INDEX 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INDEX ::= crochetouvrant EXPR crochetfermant 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDEX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INDEX ::= INDEX crochetouvrant EXPR crochetfermant 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDEX",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERANDE ::= ACCES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERANDE ::= APPELFCT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERANDE ::= constanteent 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            // Push la constante dans l'arbre.
            System.out.println("Operande : " + value);
            System.out.println("Pile status : " + pileArbres.size());
            pileArbres.push(new Nombre(Integer.parseInt(value), 1)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERANDE ::= vrai 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDE ::= faux 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPEBIN ::= plus 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPEBIN ::= moins 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPEBIN ::= mult 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPEBIN ::= div 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPEBIN ::= doubleegal 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPEBIN ::= different 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPEBIN ::= pluspetit 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPEBIN ::= plusgrand 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPEBIN ::= pluspetitegal 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPEBIN ::= plusgrandegal 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPEBIN ::= et 
            {
              String RESULT =null;
		 RESULT = "et"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPEBIN ::= ou 
            {
              String RESULT =null;
		 RESULT = "ou"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEBIN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPEUN ::= moinsunaire 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEUN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPEUN ::= no 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEUN",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // APPELFCT ::= ident parentouvrante parentfermante 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPELFCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // APPELFCT ::= ident parentouvrante PAREFF parentfermante 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPELFCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PAREFF ::= EXPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAREFF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PAREFF ::= PAREFF virgule EXPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAREFF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
